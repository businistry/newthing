{"Required Python packages":["django==3.2.9","djangorestframework==3.12.4","psycopg2-binary==2.9.1","celery==5.1.2","channels==3.0.4","django-cms==3.9.0","pyjwt==2.3.0","react==17.0.2","django-cors-headers==3.10.0"],"Required Other language third-party packages":["Node.js and npm for React frontend"],"Logic Analysis":[["manage.py","Django's command-line utility for administrative tasks"],["passive_income_generator/settings.py","Django settings file, import os, django, channels, celery"],["passive_income_generator/urls.py","URL configuration, import django.urls, include API and frontend URLs"],["passive_income_generator/asgi.py","ASGI config for WebSocket support, import django, channels"],["passive_income_generator/celery.py","Celery configuration, import celery, django"],["accounts/models.py","User and Profile models, import django.db.models, django.contrib.auth.models"],["accounts/views.py","User-related views, import django.views, rest_framework.views"],["accounts/serializers.py","User and Profile serializers, import rest_framework.serializers"],["income_streams/models.py","IncomeStream and UserIncomeStream models, import django.db.models"],["income_streams/views.py","Income stream related views, import django.views, rest_framework.views"],["income_streams/serializers.py","IncomeStream and UserIncomeStream serializers, import rest_framework.serializers"],["analytics/models.py","Analytics model, import django.db.models"],["analytics/views.py","Analytics related views, import django.views, rest_framework.views"],["analytics/serializers.py","Analytics serializer, import rest_framework.serializers"],["education/models.py","EducationResource model, import django.db.models"],["education/views.py","Education resource related views, import django.views, rest_framework.views"],["education/serializers.py","EducationResource serializer, import rest_framework.serializers"],["frontend/src/App.js","Main React component, import React, react-router-dom"],["frontend/src/components/Dashboard.js","Dashboard component, import React, axios"],["frontend/src/components/IncomeStreams.js","Income streams component, import React, axios"],["frontend/src/components/Analytics.js","Analytics component, import React, axios, chart.js"],["frontend/src/components/Education.js","Education resources component, import React, axios"]],"Task list":["passive_income_generator/settings.py","passive_income_generator/urls.py","passive_income_generator/asgi.py","passive_income_generator/celery.py","accounts/models.py","accounts/serializers.py","accounts/views.py","income_streams/models.py","income_streams/serializers.py","income_streams/views.py","analytics/models.py","analytics/serializers.py","analytics/views.py","education/models.py","education/serializers.py","education/views.py","frontend/src/App.js","frontend/src/components/Dashboard.js","frontend/src/components/IncomeStreams.js","frontend/src/components/Analytics.js","frontend/src/components/Education.js","manage.py"],"Full API spec":"openapi: 3.0.0\ninfo:\n  title: Passive Income Generator API\n  version: 1.0.0\npaths:\n  /api/accounts/register:\n    post:\n      summary: Register a new user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                email:\n                  type: string\n                password:\n                  type: string\n      responses:\n        '201':\n          description: User created successfully\n  /api/accounts/login:\n    post:\n      summary: Log in a user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n      responses:\n        '200':\n          description: Login successful\n  /api/income-streams:\n    get:\n      summary: Get available income streams\n      responses:\n        '200':\n          description: List of income streams\n    post:\n      summary: Create a new income stream\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                description:\n                  type: string\n                min_investment:\n                  type: number\n                expected_return:\n                  type: number\n                risk_level:\n                  type: string\n      responses:\n        '201':\n          description: Income stream created successfully\n  /api/user-income-streams:\n    get:\n      summary: Get user's income streams\n      responses:\n        '200':\n          description: List of user's income streams\n    post:\n      summary: Invest in an income stream\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                income_stream_id:\n                  type: integer\n                invested_amount:\n                  type: number\n      responses:\n        '201':\n          description: Investment successful\n  /api/analytics:\n    get:\n      summary: Get user's analytics\n      responses:\n        '200':\n          description: User's analytics data\n  /api/education:\n    get:\n      summary: Get educational resources\n      responses:\n        '200':\n          description: List of educational resources","Shared Knowledge":"The project uses Django for the backend, React for the frontend, and PostgreSQL for the database. Celery is used for task queue management, and Django Channels for WebSocket support. The API is built using Django Rest Framework, and JWT is used for API authentication. Django CMS is used for managing educational resources.","Anything UNCLEAR":"1. The specific types of passive income streams to be included initially should be defined.\n2. The target user demographic needs to be clarified to tailor features and educational content.\n3. Initial investment requirements and regulatory compliance needs should be specified.\n4. The extent of portfolio customization for advanced users needs to be detailed.\n5. Specific metrics for real-time analytics should be defined.\n6. Plans for mobile app development, if any, should be clarified.\n7. The structure and content types for the educational resources should be specified."}